from aiogram import Router, F
from aiogram.types import CallbackQuery

from keyboards.inline.book_gifts import select_segment, select_gift, open_gift_kb, open_booked_gifts_kb, open_booked_gift_kb, info, admin_kb
from keyboards.inline.start_kb import start_menu
from config import VERSION

from loader import base

router = Router()

@router.callback_query(F.data.startswith('menu'))
async def page_two(call_data: CallbackQuery):
    if call_data.data == 'menu_gifts_list':
        await call_data.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø–æ–¥–∞—Ä–∫–æ–≤', reply_markup=select_segment())
        await call_data.answer()

    elif call_data.data == 'menu_my_book':
        gifts = await base.get_booked_gifts(id_user=call_data.from_user.id)

        await call_data.message.edit_text(
            text='–ù–∏–∂–µ —É–∫–∞–∑–∞–Ω—ã –ø–æ–¥–∞—Ä–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏. –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏—Å—å –≤–Ω—É—Ç—Ä—å –ø–æ–¥–∞—Ä–∫–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É!',
            reply_markup=open_booked_gifts_kb(gifts=gifts)
        )

    elif call_data.data == 'menu_info':
        await call_data.message.edit_text(
            text=f'–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {VERSION}',
            reply_markup=info()
        )

    elif call_data.data == 'menu_admin':
        await call_data.message.edit_text(
            text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç–µ –Ω–æ–≤—ã–π!', 
            reply_markup=await admin_kb()
        )

@router.callback_query(F.data.startswith('SS'))
async def print_gifts(call_data: CallbackQuery):

    segment = call_data.data.removeprefix('SS_')

    await call_data.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø–æ–¥–∞—Ä–æ–∫. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ç–µ–ª–æ –ø–æ–¥–∞—Ä–∫–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–≥–æ, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.\n\n‚ÄºÔ∏è–ï—Å–ª–∏ —Ä—è–¥–æ–º —Å –ø–æ–¥–∞—Ä–∫–æ–º —Å—Ç–æ–∏—Ç –∑–Ω–∞—á–µ–∫ "üîí", —Ç–æ –æ–Ω –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω‚ÄºÔ∏è', reply_markup=await select_gift(segment=segment))
    await call_data.answer()

@router.callback_query(F.data.startswith('SG'))
async def print_gifts(call_data: CallbackQuery):
    id_gift = call_data.data.removeprefix('SG_')

    data = await base.get_gift(id=id_gift)

    if data[3] != 'book':
        await call_data.message.edit_text(
            text=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {data[1]}\n–¶–µ–Ω–∞: {data[2]} –≤–µ—á–Ω–æ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö\n–û–ø–∏—Å–∞–Ω–∏–µ: {data[4]}\n\n–°—Ç–∞—Ç—É—Å: {"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æüîí" if data[-1] != 0 else "–î–æ—Å—Ç—É–ø–Ω–æ‚úÖ"}\n\n–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∏, –≥–¥–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –¥–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –º–Ω–µ –ª–µ–Ω—å –±—ã–ª–æ –∏—Ö –¥–∞–≤–∞—Ç—åü§∑üèº‚Äç‚ôÇÔ∏è –∏–ª–∏ —è –Ω–µ —Å–º–æ–≥ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å)', 
            reply_markup=open_gift_kb(id_gift=id_gift, links=data[5].split('|'), book_status=data[-1])
        )

    else:
        await call_data.message.edit_text(
            text=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {data[1]}\n–ê–≤—Ç–æ—Ä: {data[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {data[4]}\n\n–°—Ç–∞—Ç—É—Å: {"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æüîí" if data[-1] != 0 else "–î–æ—Å—Ç—É–ø–Ω–æ‚úÖ"}', 
            reply_markup=open_gift_kb(id_gift=id_gift, book_status=data[-1])
        )

    await call_data.answer()

@router.callback_query(F.data.startswith('OG'))
async def process_gift(call_data: CallbackQuery):
    name_process = call_data.data.removeprefix('OG_')

    if 'booked' in name_process:
        id_gift = name_process.split('_')[-1]

        await base.add_booked_user(id_user=call_data.from_user.id, id_gift=id_gift)
        await call_data.answer('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –≤ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!')
        await call_data.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø–æ–¥–∞—Ä–∫–æ–≤', reply_markup=select_segment())

    elif name_process == 'null':
        await call_data.answer()

    elif name_process == 'back':
        await call_data.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø–æ–¥–∞—Ä–∫–æ–≤', reply_markup=select_segment())

    elif name_process == 'home':
        await call_data.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ', reply_markup=await start_menu(id=call_data.from_user.id))

@router.callback_query(F.data.startswith('AGS'))
async def process_gift(call_data: CallbackQuery):
    id_gift = call_data.data.removeprefix('AGS_')

    data = await base.get_gift(id=id_gift)

    if data[3] != 'book':
        await call_data.message.edit_text(
                text=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {data[1]}\n–¶–µ–Ω–∞: {data[2]} –≤–µ—á–Ω–æ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö\n–û–ø–∏—Å–∞–Ω–∏–µ: {data[4]}\n\n–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∏, –≥–¥–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –¥–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –º–Ω–µ –ª–µ–Ω—å –±—ã–ª–æ –∏—Ö –¥–∞–≤–∞—Ç—åü§∑üèº‚Äç‚ôÇÔ∏è –∏–ª–∏ —è –Ω–µ —Å–º–æ–≥ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å)', 
                reply_markup=open_booked_gift_kb(id_gift=id_gift, links=data[5].split('|'))
            )
        
    else:
        await call_data.message.edit_text(
                text=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {data[1]}\n–ê–≤—Ç–æ—Ä: {data[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {data[4]}', 
                reply_markup=open_booked_gift_kb(id_gift=id_gift)
            )
    
    await call_data.answer()

@router.callback_query(F.data.startswith('AG'))
async def process_gift(call_data: CallbackQuery):
    request = call_data.data.removeprefix('AG_')

    if 'unbook' in request:
        await base.remove_booked_user(id_gift=request.split('_')[-1])
        await call_data.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ', reply_markup=await start_menu(id=call_data.from_user.id)) 
        await call_data.answer('–í—ã —Ä–∞–∑–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∏ —Ç–µ–ø–µ—Ä—å –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –±—Ä–æ–Ω–∏ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤.')
        